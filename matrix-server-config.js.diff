*** /home/sylvain/src/nodered/node-red-data/node_modules/node-red-contrib-matrix-chat/src/matrix-server-config.js	2024-03-11 14:37:21.288175997 +0100
--- matrix-server-config.js	2024-03-24 11:30:26.123283604 +0100
***************
*** 1,4 ****
--- 1,6 ----
  global.Olm = require('olm');
+ const { HttpProxyAgent, HttpsProxyAgent } = require('hpagent');
+ const URL = require("url").URL
  const fs = require("fs-extra");
  const sdk = require("matrix-js-sdk");
  const { resolve } = require('path');
***************
*** 7,20 ****
  const {RoomEvent, RoomMemberEvent, HttpApiEvent, ClientEvent, MemoryStore} = require("matrix-js-sdk");
  const request = require("request");
  require("abort-controller/polyfill"); // polyfill abort-controller if we don't have it
! if (!globalThis.fetch) {
!     // polyfill fetch if we don't have it
!     if (!globalThis.fetch) {
!         import('node-fetch').then(({ default: fetch, Headers, Request, Response }) => {
!             Object.assign(globalThis, { fetch, Headers, Request, Response })
!         })
!     }
! }
  
  module.exports = function(RED) {
      // disable logging if set to "off"
--- 9,22 ----
  const {RoomEvent, RoomMemberEvent, HttpApiEvent, ClientEvent, MemoryStore} = require("matrix-js-sdk");
  const request = require("request");
  require("abort-controller/polyfill"); // polyfill abort-controller if we don't have it
! // Don't rely on node's experimental fetch() api.
! // Undici's proxy agent is not commonly used yet. Wait and see
! import('node-fetch').then(({ default: fetch, Headers, Request, Response }) => {
!     Object.assign(globalThis, { fetch, Headers, Request, Response })
! })
! 
! 
! 
  
  module.exports = function(RED) {
      // disable logging if set to "off"
***************
*** 55,61 ****
  
          this.globalAccess = n.global;
          this.initializedAt = new Date();
!         
          if(!this.userId) {
              node.log("Matrix connection failed: missing user ID in configuration.");
              return;
--- 57,129 ----
  
          this.globalAccess = n.global;
          this.initializedAt = new Date();
! 
!         let prox, noprox, proxyAgent, proxyAgentTls;
!         if (process.env.http_proxy) { prox = process.env.http_proxy; }
!         if (process.env.HTTP_PROXY) { prox = process.env.HTTP_PROXY; }
!         if (process.env.no_proxy) { noprox = process.env.no_proxy.split(","); }
!         if (process.env.NO_PROXY) { noprox = process.env.NO_PROXY.split(","); }
! 
!         let proxyConfig = null;
!         if (n.proxy) {
!             proxyConfig = RED.nodes.getNode(n.proxy);
!             prox = proxyConfig.url;
!             noprox = proxyConfig.noproxy;
!         }
!         let noproxy;
!         if (noprox) {
!             for (var i = 0; i < noprox.length; i += 1) {
!                 if (this.url.indexOf(noprox[i]) !== -1) { noproxy=true; }
!             }
!         }
!         if (prox && !noproxy) {
!             const match = prox.match(/^(https?:\/\/)?(.+)?:([0-9]+)?/i);
!             if (match) {
!                 let proxyURL = new URL(prox);
!                 //set username/password to null to stop empty creds header
!                 let proxyOptions = {
!                     proxy: {
!                         protocol: proxyURL.protocol,
!                         hostname: proxyURL.hostname,
!                         port: proxyURL.port,
!                         username: null,
!                         password: null
!                     },
!                     maxFreeSockets: 256,
!                     maxSockets: 256,
!                     keepAlive: true
!                 }
!                 if (proxyConfig && proxyConfig.credentials) {
!                     let proxyUsername = proxyConfig.credentials.username || '';
!                     let proxyPassword = proxyConfig.credentials.password || '';
!                     if (proxyUsername || proxyPassword) {
!                         proxyOptions.proxy.username = proxyUsername;
!                         proxyOptions.proxy.password = proxyPassword;
!                     }
!                 } else if (proxyURL.username || proxyURL.password){
!                     proxyOptions.proxy.username = proxyURL.username;
!                     proxyOptions.proxy.password = proxyURL.password;
!                 }
!                 proxyAgent = new HttpProxyAgent(proxyOptions);
!                 proxyAgentTls = new HttpsProxyAgent(proxyOptions)
!             } else {
!                 node.warn("Bad proxy url: "+ prox);
!             }
!         }
!         const fetchWithAgent = async (...args) => {
!             let params = {};
!             if (args && args.length > 1) {
!                 params = args[1];
!             }
!             if (proxyAgent) {
!                 return await fetch(args[0], {...params, agent: (args[0] && args[0].toString().toLowerCase().startsWith("https") ?
!                     proxyAgentTls : proxyAgent) });
!             } else {
!                 return await fetch(...args);
!             }
!         }
! 
! 
          if(!this.userId) {
              node.log("Matrix connection failed: missing user ID in configuration.");
              return;
***************
*** 135,140 ****
--- 203,209 ----
              fs.ensureDirSync(storageDir); // create storage directory if it doesn't exist
              upgradeDirectoryIfNecessary(node, storageDir);
              node.matrixClient = sdk.createClient({
+                 fetchFn: fetchWithAgent,
                  baseUrl: this.url,
                  accessToken: this.credentials.accessToken,
                  cryptoStore: new LocalStorageCryptoStore(localStorage),
***************
*** 447,452 ****
--- 516,522 ----
                  displayName = req.body.displayName || undefined;
  
              const matrixClient = sdk.createClient({
+                 fetchFn: fetchWithAgent,
                  baseUrl: baseUrl,
                  deviceId: deviceId,
                  localTimeoutMs: '30000',
***************
*** 534,537 ****
          localStorage.setItem('my_device_id', deviceId);
          return true;
      }
! }
\ Pas de fin de ligne Ã  la fin du fichier
--- 604,607 ----
          localStorage.setItem('my_device_id', deviceId);
          return true;
      }
! }
